from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatPermissions
from aiogram import F
import asyncio
from datetime import datetime, timedelta
import time
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
OWNER_ID = int(os.getenv('OWNER_ID'))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º—è –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MUTE_TIME = 3600  # 1 —á–∞—Å

# –ú–µ—Ç—Ä–∏–∫–∏
metrics = {
    'requests_count': 0,
    'messages_count': 0,
    'start_time': time.time(),
}


# –°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
muted_users = {}

# –†–ü –∫–æ–º–∞–Ω–¥—ã
rp_commands = {
    "–æ–±–Ω—è—Ç—å": "–æ–±–Ω—è–ª(–∞)",
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)",
    "—É–¥–∞—Ä–∏—Ç—å": "—É–¥–∞—Ä–∏–ª(–∞)",
    "–¥–∞—Ç—å_–ø—è—Ç—å": "–¥–∞–ª(–∞) –ø—è—Ç—å",
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å": "–ø–æ–≥–ª–∞–¥–∏–ª(–∞)",
    "–ø–æ–∂–∞—Ç—å_—Ä—É–∫—É": "–ø–æ–∂–∞–ª(–∞) —Ä—É–∫—É",
    "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å": "–ø–æ–¥–º–∏–≥–Ω—É–ª(–∞)",
    "–∑–∞–ø–ª–∞–∫–∞—Ç—å": "–∑–∞–ø–ª–∞–∫–∞–ª(–∞)",
    "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å": "–ø–æ–¥–¥–µ—Ä–∂–∞–ª(–∞)",
    "—Ä–∞—Å—Å–º–µ—à–∏—Ç—å": "—Ä–∞—Å—Å–º–µ—à–∏–ª(–∞)",
    "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å_–Ω–∞_—Å–≤–∏–¥–∞–Ω–∏–µ": "–ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
    "–Ω–∞–∫–æ—Ä–º–∏—Ç—å": "–Ω–∞–∫–æ—Ä–º–∏–ª(–∞)",
    "–ø–æ—Å–º–µ—è—Ç—å—Å—è_–Ω–∞–¥": "–ø–æ—Å–º–µ—è–ª—Å—è(–∞—Å—å) –Ω–∞–¥",
    "–∏—Å–ø—É–≥–∞—Ç—å": "–∏—Å–ø—É–≥–∞–ª(–∞)",
    "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª(–∞)",
    "–≤—ã—Ä–∞–∑–∏—Ç—å_–ª—é–±–æ–≤—å": "–≤—ã—Ä–∞–∑–∏–ª(–∞) –ª—é–±–æ–≤—å –∫",
    "–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": "–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª(–∞)",
    "—Å–¥–µ–ª–∞—Ç—å_–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç": "—Å–¥–µ–ª–∞–ª(–∞) –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç",
    "–ø–æ–¥–∞—Ä–∏—Ç—å_–ø–æ–¥–∞—Ä–æ–∫": "–ø–æ–¥–∞—Ä–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫",
    "–ø–æ—Ä—É–≥–∞—Ç—å": "–ø–æ—Ä—É–≥–∞–ª(–∞)",
    "—Å–∫–∞–∑–∞—Ç—å_—Å–ø–∞—Å–∏–±–æ": "—Å–∫–∞–∑–∞–ª(–∞) —Å–ø–∞—Å–∏–±–æ",
    "–ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å": "–ø–æ–∑–¥—Ä–∞–≤–∏–ª(–∞)"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Iris Manager 2.0. –í–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /mute, /unmute, /ban, /unban, /warn, /unwarn, /mutelist –∏ /ping –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /mute
@dp.message(Command(commands=['mute']))
async def mute_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        until_date = datetime.now() + timedelta(seconds=MUTE_TIME)
        muted_users[user_id] = until_date.timestamp()
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=int(until_date.timestamp())
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω –¥–æ {until_date.strftime('%Y-%m-%d %H:%M:%S')}.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /unmute
@dp.message(Command(commands=['unmute']))
async def unmute_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        if user_id in muted_users:
            del muted_users[user_id]
            await bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
        else:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—É—á–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@dp.message(Command(commands=['ban']))
async def ban_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        await bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=user_id
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /unban
@dp.message(Command(commands=['unban']))
async def unban_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        await bot.unban_chat_member(
            chat_id=message.chat.id,
            user_id=user_id
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /warn
@dp.message(Command(commands=['warn']))
async def warn_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /unwarn
@dp.message(Command(commands=['unwarn']))
async def unwarn_user(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if not message.reply_to_message:
            await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        user_id = message.reply_to_message.from_user.id
        await message.answer(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.full_name} —Å–Ω—è—Ç–æ.")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /mutelist
@dp.message(Command(commands=['mutelist']))
async def mutelist(message: types.Message):
    if message.from_user.id == OWNER_ID:
        if muted_users:
            response = "–°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user_id, timestamp in muted_users.items():
                user = await bot.get_chat_member(message.chat.id, user_id)
                response += f"{user.user.full_name} –¥–æ {datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')}\n"
            await message.answer(response)
        else:
            await message.answer("–ù–µ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –ö–æ–º–∞–Ω–¥–∞ /ping
@dp.message(Command(commands=['ping']))
async def ping_users(message: types.Message):
    if message.from_user.id == OWNER_ID:
        # –ò–∑–º–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = time.time()

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        uptime = current_time - metrics['start_time']

        # –ü—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫
        rps = metrics['requests_count'] / (uptime / 60)  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        mps = metrics['messages_count'] / (uptime / 60)  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        average_response_time = "21 ms"  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        average_message_response_time = "451 ms"  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        pending_updates = 22  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_text = (
            "üèì pong\n\n"
            "‚ú® Performance Metrics:\n"
            f"- üöÄ Requests per Second (RPS): {rps:.2f}\n"
            f"- ‚è±Ô∏è Average Response Time: {average_response_time}\n"
            f"- üìà Messages per Second (MPS): {mps:.2f}\n"
            f"- üïí Average Messages Response Time: {average_message_response_time}\n\n"
            "üì• Queue Status:\n"
            f"- üîÑ Pending Updates: {pending_updates}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        await message.answer(f"üèì pong\n\n{metrics_text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        members = await bot.get_chat_administrators(message.chat.id)
        for admin in members:
            user_id = admin.user.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
            if not admin.user.is_bot:
                try:
                    await bot.send_message(user_id, metrics_text)
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    metrics['requests_count'] += 1
    if message.text:
        metrics['messages_count'] += 1

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–æ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text.in_(list(rp_commands.keys())))
async def rp_commands_handler(message: types.Message):
    command = message.text.strip()
    if command in rp_commands:
        action = rp_commands[command]
        if message.reply_to_message:
            target = message.reply_to_message.from_user.full_name
            await message.answer(f"{message.from_user.full_name} {action} {target}!")
        else:
            await message.answer(f"{message.from_user.full_name} {action} –≤—Å–µ—Ö!")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    async def main():
        await dp.start_polling(bot)

    asyncio.run(main())
